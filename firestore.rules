rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // REGLAS DE PRODUCCIÓN - ESTRICTAS Y SEGURAS
    // ✅ Usar en producción ✅
    
    // Reglas para usuarios autenticados
    match /users/{userId} {
      // Los usuarios solo pueden leer y escribir sus propios datos
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Permitir lectura de datos básicos para otros usuarios (nombre, avatar)
      allow read: if request.auth != null && 
        resource.data.keys().hasOnly(['displayName', 'photoURL', 'role']);
    }
    
    // Reglas para documentos públicos del campamento
    match /public/{document=**} {
      // Cualquier usuario autenticado puede leer información pública
      allow read: if request.auth != null;
      // Solo administradores pueden escribir
      allow write: if request.auth != null && hasRole('admin');
    }
    
    // Reglas para campamentos
    match /campamentos/{campId} {
      // Cualquier usuario autenticado puede leer campamentos
      allow read: if request.auth != null;
      // Solo administradores e instructores pueden crear/modificar
      allow write: if request.auth != null && hasRole(['admin', 'instructor']);
    }
    
    // Reglas para inscripciones
    match /inscripciones/{inscripcionId} {
      // Los usuarios pueden leer y escribir sus propias inscripciones
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.participanteId;
      // Administradores e instructores pueden ver todas las inscripciones
      allow read: if request.auth != null && hasRole(['admin', 'instructor']);
      // Solo administradores pueden modificar inscripciones de otros
      allow write: if request.auth != null && hasRole('admin');
    }
    
    // Reglas para actividades
    match /actividades/{actividadId} {
      // Cualquier usuario autenticado puede leer actividades
      allow read: if request.auth != null;
      // Solo instructores y administradores pueden crear/modificar
      allow write: if request.auth != null && hasRole(['admin', 'instructor']);
    }
    
    // Reglas para posts/contenido comunitario
    match /posts/{postId} {
      // Cualquier usuario autenticado puede leer posts
      allow read: if request.auth != null;
      // Los usuarios pueden crear posts propios
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.authorId;
      // Solo el autor o administradores pueden modificar/eliminar
      allow update, delete: if request.auth != null && 
        (request.auth.uid == resource.data.authorId || hasRole('admin'));
    }
    
    // Reglas para comentarios
    match /comments/{commentId} {
      // Cualquier usuario autenticado puede leer comentarios
      allow read: if request.auth != null;
      // Los usuarios pueden crear comentarios propios
      allow create: if request.auth != null && 
        isValidComment() && request.auth.uid == request.resource.data.authorId;
      // Solo el autor, moderadores o administradores pueden modificar
      allow update, delete: if request.auth != null && 
        (request.auth.uid == resource.data.authorId || 
         hasRole(['admin', 'moderator']));
    }
    
    // Funciones auxiliares para validación
    function hasRole(roles) {
      return request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in roles;
    }
    
    function isValidComment() {
      return request.resource.data.keys().hasAll(['content', 'authorId', 'postId', 'createdAt']) &&
        request.resource.data.content is string &&
        request.resource.data.content.size() > 0 &&
        request.resource.data.content.size() <= 1000;
    }
    
    function isValidPost() {
      return request.resource.data.keys().hasAll(['title', 'content', 'authorId', 'createdAt']) &&
        request.resource.data.title is string &&
        request.resource.data.title.size() > 0 &&
        request.resource.data.content is string &&
        request.resource.data.content.size() > 0;
    }
    
    // Regla por defecto: denegar acceso no especificado
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
